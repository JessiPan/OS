import java.io.*;
import java.sql.*;
import java.util.concurrent.*;

class MergeSort {
    private Product[] products;

    public MergeSort(Product[] products) {
        this.products = products;
    }

    public void sort(int low, int high) {
        if (low < high) {
            int mid = low + (high - low) / 2;
            sort(low, mid);
            sort(mid + 1, high);
            merge(low, mid, high);
        }
    }

    private void merge(int low, int mid, int high) {
        int n1 = mid - low + 1;
        int n2 = high - mid;

        Product[] left = new Product[n1];
        Product[] right = new Product[n2];

        for (int i = 0; i < n1; ++i)
            left[i] = products[low + i];
        for (int j = 0; j < n2; ++j)
            right[j] = products[mid + 1 + j];

        int i = 0, j = 0;
        int k = low;
        while (i < n1 && j < n2) {
            if (left[i].getCalories() <= right[j].getCalories()) {
                products[k] = left[i];
                i++;
            } else {
                products[k] = right[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            products[k] = left[i];
            i++;
            k++;
        }

        while (j < n2) {
            products[k] = right[j];
            j++;
            k++;
        }
    }
}

class SortThread extends Thread {
    private MergeSort ms;
    private int low, high;
    private String fileName;

    public SortThread(MergeSort ms, int low, int high, String fileName) {
        this.ms = ms;
        this.low = low;
        this.high = high;
        this.fileName = fileName;
    }

    @Override
    public void run() {
        ms.sort(low, high);
        writeResultToFile(fileName, low, high);
    }

    private void writeResultToFile(String fileName, int low, int high) {
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileName, true));
            writer.write(Thread.currentThread().getName() + ": " + low + " - " + high + "\n");
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

public class ProductSort {
    private static final int NUM_THREADS = 8;
    private static Product[] products;

    public static void main(String[] args) {
        readDataFromDatabase();

        long startTime = System.currentTimeMillis();

        MergeSort ms = new MergeSort(products);

        // 创建线程池
        ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS);

        // 划分数据线程
        int partitionSize = products.length / NUM_THREADS;
        String fileName = "report.txt";
        for (int i = 0; i < NUM_THREADS; i++) {
            int low = i * partitionSize;
            int high = (i == NUM_THREADS - 1) ? products.length - 1 : low + partitionSize - 1;
            executor.execute(new SortThread(ms, low, high, fileName));
        }

        // 等待所有排序线程完成
        executor.shutdown();
        try {
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        long endTime = System.currentTimeMillis();
        System.out.println("排序完成，用时：" + (endTime - startTime) + "ms");

        // 将排序结果写入文件
        writeResultToFile("products.txt");
    }

    private static void readDataFromDatabase() {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/eattolife?useUnicode=true&characterEncoding=utf8";
            String user = "pxj";
            String password = "123456";
            conn = DriverManager.getConnection(url, user, password);
            stmt = conn.createStatement();
            rs = stmt.executeQuery("SELECT * FROM foodinfo");
            rs.last();
            int rowCount = rs.getRow();
            rs.beforeFirst();
            products = new Product[rowCount];
            int i = 0;
            while (rs.next()) {
                String name = rs.getString("foodName");
                double price = rs.getDouble("foodPrice");
                int calories = rs.getInt("foodCalorie");
                products[i] = new Product(name, price, calories);
                i++;
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    private static void writeResultToFile(String fileName) {
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileName));
            for (Product product : products) {
                writer.write(product.toString() + "\n");
            }
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
