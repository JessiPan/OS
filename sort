import java.util.Arrays;
import java.util.Random;

public class sort {

    public static void main(String[] args) {
        // 测试不同大小的数据量
        int[] dataSizes = {10000, 50000, 100000, 500000, 1000000};
        for (int dataSize : dataSizes) {
            int[] data = generateRandomArray(dataSize);

            System.out.println("数据量：" + dataSize);

            // 测试快速排序
            long startTime = System.currentTimeMillis();
            quickSort(Arrays.copyOf(data, data.length));
            long endTime = System.currentTimeMillis();
            System.out.println("快速排序耗时：" + (endTime - startTime) + "ms");

            // 测试归并排序
            startTime = System.currentTimeMillis();
            mergeSort(Arrays.copyOf(data, data.length));
            endTime = System.currentTimeMillis();
            System.out.println("归并排序耗时：" + (endTime - startTime) + "ms");

            // 测试堆排序
            startTime = System.currentTimeMillis();
            heapSort(Arrays.copyOf(data, data.length));
            endTime = System.currentTimeMillis();
            System.out.println("堆排序耗时：" + (endTime - startTime) + "ms");

            // 测试插入排序
            startTime = System.currentTimeMillis();
            insertionSort(Arrays.copyOf(data, data.length));
            endTime = System.currentTimeMillis();
            System.out.println("插入排序耗时：" + (endTime - startTime) + "ms");

            // 测试选择排序
            startTime = System.currentTimeMillis();
            selectionSort(Arrays.copyOf(data, data.length));
            endTime = System.currentTimeMillis();
            System.out.println("选择排序耗时：" + (endTime - startTime) + "ms");

            // 测试希尔排序
            startTime = System.currentTimeMillis();
            shellSort(Arrays.copyOf(data, data.length));
            endTime = System.currentTimeMillis();
            System.out.println("希尔排序耗时：" + (endTime - startTime) + "ms");

            // 测试计数排序
            startTime = System.currentTimeMillis();
            countingSort(Arrays.copyOf(data, data.length));
            endTime = System.currentTimeMillis();
            System.out.println("计数排序耗时：" + (endTime - startTime) + "ms");

            // 测试桶排序
            startTime = System.currentTimeMillis();
            bucketSort(Arrays.copyOf(data, data.length));
            endTime = System.currentTimeMillis();
            System.out.println("桶排序耗时：" + (endTime - startTime) + "ms");

            System.out.println();
        }
    }

    // 生成随机数组
    private static int[] generateRandomArray(int size) {
        Random random = new Random();
        int[] arr = new int[size];
        for (int i = 0; i < size; i++) {
            arr[i] = random.nextInt();
        }
        return arr;
    }

    // 快速排序
    private static void quickSort(int[] arr) {
        Arrays.sort(arr);
    }

    // 归并排序
    private static void mergeSort(int[] arr) {
        mergeSort(arr, 0, arr.length - 1);
    }

    private static void mergeSort(int[] arr, int l, int r) {
        if (l < r) {
            int m = (l + r) / 2;
            mergeSort(arr, l, m);
            mergeSort(arr, m + 1, r);
            merge(arr, l, m, r);
        }
    }

    private static void merge(int[] arr, int l, int m, int r) {
        int n1 = m - l + 1;
        int n2 = r - m;

        int[] L = new int[n1];
        int[] R = new int[n2];

        for (int i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j];

        int i = 0, j = 0;
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }

        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    // 堆排序
    private static void heapSort(int[] arr) {
        int n = arr.length;

        for (int i = n / 2 - 1; i >= 0; i--)
            heapify(arr, n, i);

        for (int i = n - 1; i > 0; i--) {
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            heapify(arr, i, 0);
        }
    }

    private static void heapify(int[] arr, int n, int i) {
        int largest = i;
        int l = 2 * i + 1;
        int r = 2 * i + 2;

        if (l < n && arr[l] > arr[largest])
            largest = l;

        if (r < n && arr[r] > arr[largest])
            largest = r;

        if (largest != i) {
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;

            heapify(arr, n, largest);
        }
    }

    // 插入排序
    private static void insertionSort(int[] arr) {
        for (int i = 1; i < arr.length; ++i) {
            int key = arr[i];
            int j = i - 1;

            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    }

    // 选择排序
    private static void selectionSort(int[] arr) {
        int n = arr.length;

        for (int i = 0; i < n - 1; i++) {
            int min_idx = i;
            for (int j = i + 1; j < n; j++)
                if (arr[j] < arr[min_idx])
                    min_idx = j;

            int temp = arr[min_idx];
            arr[min_idx] = arr[i];
            arr[i] = temp;
        }
    }

    // 希尔排序
    private static void shellSort(int[] arr) {
        int n = arr.length;
        for (int gap = n / 2; gap > 0; gap /= 2) {
            for (int i = gap; i < n; i += 1) {
                int temp = arr[i];
                int j;
                for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {
                    arr[j] = arr[j - gap];
                }
                arr[j] = temp;
            }
        }
    }
    // 计数排序
    private static void countingSort(int[] arr) {
        if (arr.length == 0) return; // 防止空数组抛出异常

        // 找到最小值和最大值
        int min = arr[0];
        int max = arr[0];
        for (int num : arr) {
            if (num < min) min = num;
            if (num > max) max = num;
        }

        // 计算范围
        int range = max - min + 1;
        if (range <= 0) return; // 范围为负数时直接返回

        int[] count = new int[range];
        int[] output = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            count[arr[i] - min]++;
        }
        for (int i = 1; i < range; i++) { // 修改此处
            count[i] += count[i - 1];
        }
        for (int i = arr.length - 1; i >= 0; i--) {
            output[count[arr[i] - min] - 1] = arr[i];
            count[arr[i] - min]--;
        }
        for (int i = 0; i < arr.length; i++) {
            arr[i] = output[i];
        }
    }

    // 桶排序
    private static void bucketSort(int[] arr) {
        if (arr.length == 0) return; // 防止空数组抛出异常

        // 找到最小值和最大值
        int min = arr[0];
        int max = arr[0];
        for (int num : arr) {
            if (num < min) min = num;
            if (num > max) max = num;
        }

        // 计算范围
        int range = max - min + 1;
        if (range <= 0) return; // 范围为负数时直接返回

        int[] count = new int[range];
        int[] output = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            count[arr[i] - min]++;
        }
        int index = 0;
        for (int i = 0; i < range; i++) {
            for (int j = 0; j < count[i]; j++) {
                output[index++] = i + min;
            }
        }
        for (int i = 0; i < arr.length; i++) {
            arr[i] = output[i];
        }
    }

}
